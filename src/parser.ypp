%code requires {
  #include "structures/Program.h"
  #include "structures/Pipeline.h"
  #include "structures/Node.h"
  #include "structures/Value.h"
  #include "structures/Command.h"
  #include "structures/Variable.h"
  #include "structures/VarPip.h"

  #include <iostream>
  #include <exception>
  #include <string>
  // #define DEBUG
  #define YYERROR_VERBOSE 1
  using namespace std;
  extern int yylex_destroy(void);
  int yylex(void);
  void set_input_string(const char* in);
  void end_lexical_scan(void);
  Program *parse(std::string);
  bool isEmpty(std::string);
  void parse_to_root(std::string);
  void find_bt_expressions(std::string);
}
%{
  #include "structures/Program.h"
  #include "structures/Value.h"
  #include <queue>
  void yyerror (char const *s);
  int errors=0;
  Program* root;
  std::queue<Program*> backticks;
%}
// Tokens

%union {
    char* sval;
    Command *command;
    Node *node;
    Pipeline *pipeline;
    Program *program;
    Value *value;
    Variable *variable;
    VarPip *varpip;
}

%start program
%token ASSIGN SC SM GR BT EOL EOFF OR EXPORT ERROR IGNORE
%token<sval> STR BT_EXPRESSION DQ_EXPRESSION SQ_EXPRESSION

%type<command> command
%type<pipeline> pipeline
%type<program> program
%type<value> value
%type<variable> variable
%type<varpip> varpip

%%
program             : program SC varpip {
                        $$ = $1;
                        $$->varpips.push_back($3);
                      }
                    | varpip {
                        $$ = new Program();
                        root = $$;
                        $$->varpips.push_back($1);
                        #ifdef DEBUG
                        cout << "new program \'" << $$->toString() << "\'" << endl;
                        #endif
                      }
                    ;



varpip              : variable {
                        $$ = $1;
                      }
                    | pipeline {
                        $$ = $1;
                      }
variable            : EXPORT value ASSIGN value {
                        $$ = new Variable(*$2, *$4, true);
                      }
                    | value ASSIGN value {
                        $$ = new Variable(*$1, *$3);
                      }
                    ;

pipeline            : pipeline OR command {
                        $$ = $1;
                        $$->commands.push_back(*$3);
                      }
                    | command {
                        std::vector<Command> cmds = {*$1};
                        $$ = new Pipeline(cmds);
                        #ifdef DEBUG
                        cout << "new pipeline \'" << $$->toString() << "\'" << endl;
                        #endif
                      }
                    ;

command             : command value {
                        $$ = $1;
                        $$->arguments.push_back(*$2);
                        #ifdef DEBUG
                        cout << "New command: \'" << $$->toString() << "\'" << endl;
                        #endif
                      }
                    | command GR value {
                        $$ = $1;
                        $$->outputFile.push_back(*$3);
                      }
                    | command SM value {
                        $$ = $1;
                        $$->inputFile.push_back(*$3);
                      }
                    | value {
                        $$ = new Command();
                        $$->commandName = *$1;
                        #ifdef DEBUG
                        cout << "New command \'" << $$->toString() << "\'" << endl;
                        #endif
                      }
                    ;
value               : STR {
                        $$ = new Value($1);
                      }
                    | BT_EXPRESSION {
                        std::string bt_str = string($1);
                        // $$ = new Value(bt_str.substr(1, bt_str.length() - 2));
                        $$ = new Value(backticks.front());
                        backticks.pop();
                      }
                    | DQ_EXPRESSION {
                        std::string dq_str = string($1);
                        $$ = new Value(dq_str.substr(1, dq_str.length() - 2));
                      }
                    | SQ_EXPRESSION {
                        std::string sq_str = string($1);
                        $$ = new Value(sq_str);
                      }
                    ;

%%

void yyerror (char const *s)
{
#ifdef DEBUG
    cout << "Error: " << s << endl;
#endif
}


Program *parse(std::string command)
{
    find_bt_expressions(command);
    if (isEmpty(command)) {
        return new Program();
    }
    parse_to_root(command);
    return root;
}

void find_bt_expressions(std::string str) {
    int i = 0, j = 0;
    while (!backticks.empty())
        backticks.pop();
    while (i < str.length()) {
        if (str[i] == '`') {
            j = i;
            i++;
            while (str.length() > i && str[i] != '`')
                i++;
            if (str.length() <= i)
                throw std::runtime_error("Not closed backticks.");
            std::string bt_str = str.substr(j + 1, i - j- 1);
            // cout << "\'" +bt_str +"\'" << endl;
            if (isEmpty(bt_str)) {
                backticks.push(new Program());
            }
            else {
                parse_to_root(bt_str);
                backticks.push(root);
            }
        }
        i++;
    }
}

bool isEmpty(std::string command) {
    for (auto c : command) {
        if (c != ' ' && c != '\t' && c != '\n' && c != '\r')
            return false;
    }
    return true;
}

void parse_to_root(std::string command) {
    set_input_string(command.c_str());
    yyparse();
    end_lexical_scan();
    yylex_destroy();
    if (yynerrs) {
        throw std::runtime_error("Bad request.");
    }
}
